version: '3.4'

services:
  applications.webapi:
    image: ${DOCKER_REGISTRY-}applicationswebapi
    build:
      context: .
      dockerfile: Modules/Applications/Applications.WebApi/Dockerfile  
    depends_on:
      - kafka
    environment:
       OTEL_SERVICE_NAME: "Applications"
       OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
       OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}   
       OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf

       OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
       OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}
       
       ConnectionStrings__Default: ${CREDIT_APPLICATIONS_CONNECTION_STRING}       
       ConnectionStrings__AzCosmosDB: ${AZ_COSMOSDB_CONNECTION_STRING}
       ConnectionStrings__MongoDB: ${MONGODB_CONNECTION_STRING}
       ConnectionStrings__AzServiceBus: ${AZ_SERVICE_BUS_CONNECTION_STRING}
       ConnectionStrings__Kafka: kafka:9092

       DatabaseProvider: "mongodb"
       ServiceBusProvider: "kafka"
       
       Kafka__groupid: credit-applications
       Kafka__enableautocommit: "false"
       Kafka__statisticsintervalms: 5000
       Kafka__autooffsetreset: earliest
       Kafka__enablepartitioneof: "true"

  calculations.webapi:
    image: ${DOCKER_REGISTRY-}calculationswebapi
    build:
      context: .
      dockerfile: Modules/Calculations/Calculations.WebApi/Dockerfile
    depends_on:
      - kafka
    environment:
       OTEL_SERVICE_NAME: "Calculations"
       OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
       OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}   
       OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf

       OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
       OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}

       ConnectionStrings__AzCosmosDB: ${AZ_COSMOSDB_CONNECTION_STRING}
       ConnectionStrings__MongoDB: ${MONGODB_CONNECTION_STRING}
       ConnectionStrings__Default: ${CREDIT_CALCULATIONS_CONNECTION_STRING}       
       ConnectionStrings__AzServiceBus: ${AZ_SERVICE_BUS_CONNECTION_STRING}
       ConnectionStrings__Kafka: kafka:9092

       DatabaseProvider: "mongodb"
       ServiceBusProvider: "kafka"
       
       Kafka__groupid: credit-calculations
       Kafka__enableautocommit: "false"
       Kafka__statisticsintervalms: 5000
       Kafka__autooffsetreset: earliest
       Kafka__enablepartitioneof: "true"

  processes.webapi:
    image: ${DOCKER_REGISTRY-}processeswebapi
    build:
      context: .
      dockerfile: Modules/Processes/Processes.WebApi/Dockerfile
    depends_on:
      - zeebe
      - kafka 
    environment:
       OTEL_SERVICE_NAME: "Processes"
       OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
       OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}   
       OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf

       OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
       OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}

       Camunda__CamundaRest__Endpoint: ${CAMUNDA_ADDRESS_REST}
       Camunda__CamundaGrpc__Endpoint: ${CAMUNDA_ADDRESS_GRPC}

       Camunda__JobWorkers__Default__TimeoutInMs: 60000
       Camunda__JobWorkers__Default__PoolingMaxJobsToActivate: 5
       Camunda__JobWorkers__Default__PoolingRequestTimeoutInMs: 10000
       Camunda__JobWorkers__Default__PoolingDelayInMs: 200
       Camunda__JobWorkers__Default__UseStream: "false"
       Camunda__JobWorkers__Default__StreamTimeoutInSec: 900

       ConnectionStrings__AzServiceBus: ${AZ_SERVICE_BUS_CONNECTION_STRING}
       ConnectionStrings__Kafka: kafka:9092

       ServiceBusProvider: "kafka"
       
       Kafka__groupid: credit-processes
       Kafka__enableautocommit: "false"
       Kafka__statisticsintervalms: 5000
       Kafka__autooffsetreset: earliest
       Kafka__enablepartitioneof: "true"


  credit.front.server:
    image: ${DOCKER_REGISTRY-}creditfrontserver
    build:
      context: .
      dockerfile: Modules/Front/Credit.Front/Server/Dockerfile

  zeebe:
    image: camunda/zeebe:${CAMUNDA_PLATFORM_VERSION}
    container_name: zeebe
    ports:
      - "26500:26500"
      - "9600:9600"
      - "8089:8080" 
    environment: # https://docs.camunda.io/docs/self-managed/zeebe-deployment/configuration/environment-variables/
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=${ELASTIC_ADDRESS}
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_AUTHENTICATION_USERNAME=${ELASTIC_USER}
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_AUTHENTICATION_PASSWORD=${ELASTIC_PASSWORD}
      # default is 1000, see here: https://github.com/camunda/zeebe/blob/main/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchExporterConfiguration.java#L259
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1000
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_DELAY=1
      # allow running with low disk space
      - ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK=0.998
      - ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK=0.999
      - "JAVA_TOOL_OPTIONS=-Xms512m -Xmx512m"
      - CAMUNDA_REST_QUERY_ENABLED=true
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - zeebe:/usr/local/zeebe/data
    depends_on:
      - elasticsearch

  operate:
    image: camunda/operate:${CAMUNDA_PLATFORM_VERSION}
    container_name: operate
    ports:
      - "8085:8080"
    environment: # https://docs.camunda.io/docs/self-managed/operate-deployment/configuration/
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=${ELASTIC_ADDRESS}
      - CAMUNDA_OPERATE_ELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - CAMUNDA_OPERATE_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=${ELASTIC_ADDRESS}
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.probes.enabled=true
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness" ]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    depends_on:
      - zeebe
      - elasticsearch

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
        - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
        bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST  -u "${ELASTIC_USER}:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";'

  elasticsearch: # https://hub.docker.com/_/elasticsearch
    depends_on:
      - setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - node.name=elasticsearch
      - path.logs=/var/log/
      - cluster.name=elasticsearch
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - elastic:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTIC_ADDRESS}
      - ELASTIC_APM_ACTIVE=true
      - ELASTIC_APM_SERVER_URL=http://apm:8200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    ports:
      - 5602:5601
    volumes:
      - kibana:/usr/share/kibana/data
    depends_on:
      - elasticsearch
  apm:
    image: docker.elastic.co/apm/apm-server:${ELASTIC_VERSION}
    container_name: apm
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
        - 8200:8200
    depends_on:
        - elasticsearch
        - kibana
    command: >
        apm-server -e
        -E output.elasticsearch.protocol=http
        -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
        -E output.elasticsearch.username=${ELASTIC_USER}
        -E output.elasticsearch.password=${ELASTIC_PASSWORD}
        -E output.elasticsearch.ssl.enabled=false

  kafka:
    container_name: "kafka"
    image: "docker.io/confluentinc/confluent-local:7.7.1"
    environment:
      KAFKA_LISTENERS: "PLAINTEXT://localhost:29092,CONTROLLER://localhost:29093,PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092,PLAINTEXT_INTERNAL://kafka:9093"
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENABLED}
      OTEL_SERVICE_NAME: "kafka"
    ports:
    - target: 9092
      published: 9092
    - target: 9093
      published: 9093
    restart: unless-stopped
 
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8087:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=""
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
        - kafka
    
  # operations.webapi:
  #   image: ${DOCKER_REGISTRY-}operationswebapi
  #   build:
  #     context: .
  #     dockerfile: Modules/Operations/Operations.WebApi/Dockerfile
  #   environment:
  #      OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
  #      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}       
  #      OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
  #      OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}
  #      ConnectionStrings__Elasticsearch: ${ELASTIC_ADDRESS}

  # operations.backoffice.server:
  #   image: ${DOCKER_REGISTRY-}operationsbackofficeserver
  #   build:
  #     context: .
  #     dockerfile: Modules/BackOffice/Operations.BackOffice/Server/Dockerfile

  # creditprocessfunctions:
  #   image: ${DOCKER_REGISTRY-}creditprocessfunctions
  #   build:
  #     context: .
  #     dockerfile: Modules/Functions/CreditProcessFunctions/Dockerfile

  mongo:
    image: mongo
    restart: always
    ports:
        - 27017:27017
    environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example

  # db:
  #   image: "mcr.microsoft.com/mssql/server"
  #   container_name: db
  #   ports:
  #     - "1433:1433"
  #   environment:
  #     SA_PASSWORD: "S3cur3P@ssW0rd!"
  #     ACCEPT_EULA: "Y"

volumes:
  zeebe:
  elastic:
  kibana:
  certs:
    driver: local





