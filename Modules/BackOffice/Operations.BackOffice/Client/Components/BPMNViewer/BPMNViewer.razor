@using System.Runtime.InteropServices.JavaScript;
@using System.Net;
@using System.Text.Json;
@using System.Text.Json.Serialization;

@using Microsoft.Extensions.Options;

@inject IJSRuntime JS
@implements IAsyncDisposable

@if (Xml != null)
{
    <div @ref="_bpmnJsElement" style="height:100%;"></div>

    <span @ref="_incidenetIconReference" data-toggle="tooltip" data-placement="bottom" title="incident">
        <MudBadge Color="Color.Error" Icon="@Icons.Material.Rounded.Error" Content="1" />
    </span>
}

@code {
    private ElementReference _bpmnJsElement;
    private IJSObjectReference _bpmnJsModule;
    private IJSObjectReference _bpmnJsInstance;

    private ElementReference _incidenetIconReference;

    [Parameter]
    public string? Xml { get; set; }

    [Parameter]
    public string[] SequenceFlows { get; set; } = Array.Empty<string>();

    [Parameter]
    public string[] IncidentElementIds { get; set; } = Array.Empty<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _bpmnJsModule = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./Components/BPMNViewer/BPMNViewer.razor.js");

            _bpmnJsInstance = await _bpmnJsModule.InvokeAsync<IJSObjectReference>(
                "createBpmnJSInstance",
                _bpmnJsElement);

            await InvokeAsync(StateHasChanged);
        }

        if (!firstRender && _bpmnJsInstance != null)
        {
            await OpenDiagram();
        }
    }

    private async Task OpenDiagram()
    {
        await _bpmnJsModule.InvokeVoidAsync("openDiagram", _bpmnJsInstance, Xml);

        await _bpmnJsModule.InvokeVoidAsync("addElemenInstanceSequenceFlowsMarker", _bpmnJsInstance, SequenceFlows);

        foreach (var incidentElementId in IncidentElementIds)
        {
            await _bpmnJsModule.InvokeVoidAsync("addElementInstanceIncidentMarker", _bpmnJsInstance, incidentElementId);
            await _bpmnJsModule.InvokeVoidAsync("addIncidentMarker", _bpmnJsInstance, incidentElementId, _incidenetIconReference);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        // await _bpmnJsInstance.InvokeVoidAsync("destroy"); // @TODO REVIEW
        await _bpmnJsInstance.DisposeAsync();
        await _bpmnJsModule.DisposeAsync();
    }
}
