version: '3.4'

services:
  applications.webapi:
    image: ${DOCKER_REGISTRY-}applicationswebapi
    build:
      context: .
      dockerfile: Modules/Applications/Applications.WebApi/Dockerfile
    depends_on:
      - zeebe
    environment:
       OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
       OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}       
       # OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://seq:5341/ingest/otlp/v1/logs
       # OTEL_EXPORTER_OTLP_LOGS_HEADERS: X-Seq-ApiKey=tAndZ4eevhnvmhQqKpVQ
       # OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: http/protobuf

       # OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://seq:5341/ingest/otlp/v1/traces
       # OTEL_EXPORTER_OTLP_TRACES_HEADERS: X-Seq-ApiKey=tAndZ4eevhnvmhQqKpVQ
       # OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: http/protobuf

       OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
       OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}
       
       ConnectionStrings__Default: ${CREDIT_APPLICATIONS_CONNECTION_STRING}       
       ConnectionStrings__AzCosmosDB: ${AZ_COSMOSDB_CONNECTION_STRING}
       ConnectionStrings__MongoDB: ${MONGODB_CONNECTION_STRING}
       ConnectionStrings__AzServiceBus: ${AZ_SERVICE_BUS_CONNECTION_STRING}
       
       DatabaseProvider: "mongodb"
       ServiceBusProvider: "kafka"
       
       EventBus__bootstrapservers: kafka:9092
       EventBus__groupid: credit-applications
       EventBus__enableautocommit: "false"
       EventBus__statisticsintervalms: 5000
       EventBus__autooffsetreset: earliest
       EventBus__enablepartitioneof: "true"
       
  calculations.webapi:
    image: ${DOCKER_REGISTRY-}calculationswebapi
    build:
      context: .
      dockerfile: Modules/Calculations/Calculations.WebApi/Dockerfile
    depends_on:
      - zeebe
    environment:
       OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
       OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}       
       OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
       OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}

       # OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://seq:5341/ingest/otlp/v1/logs
       # OTEL_EXPORTER_OTLP_LOGS_HEADERS: X-Seq-ApiKey=tAndZ4eevhnvmhQqKpVQ
       # OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: http/protobuf

       # OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://seq:5341/ingest/otlp/v1/traces
       # OTEL_EXPORTER_OTLP_TRACES_HEADERS: X-Seq-ApiKey=tAndZ4eevhnvmhQqKpVQ
       # OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: http/protobuf

       ConnectionStrings__AzCosmosDB: ${AZ_COSMOSDB_CONNECTION_STRING}
       ConnectionStrings__MongoDB: ${MONGODB_CONNECTION_STRING}
       ConnectionStrings__Default: ${CREDIT_CALCULATIONS_CONNECTION_STRING}       
       ConnectionStrings__AzServiceBus: ${AZ_SERVICE_BUS_CONNECTION_STRING}
       
       DatabaseProvider: "mongodb"
       ServiceBusProvider: "kafka"
       
       EventBus__bootstrapservers: kafka:9092
       EventBus__groupid: credit-calculations
       EventBus__enableautocommit: "false"
       EventBus__statisticsintervalms: 5000
       EventBus__autooffsetreset: earliest
       EventBus__enablepartitioneof: "true"

  # db:
  #   image: "mcr.microsoft.com/mssql/server"
  #   container_name: db
  #   ports:
  #     - "1433:1433"
  #   environment:
  #     SA_PASSWORD: "S3cur3P@ssW0rd!"
  #     ACCEPT_EULA: "Y"

  zeebe:
    image: camunda/zeebe:${CAMUNDA_PLATFORM_VERSION}
    container_name: zeebe
    ports:
      - "26500:26500"
      - "9600:9600"
      - "8089:8080" 
    environment: # https://docs.camunda.io/docs/self-managed/zeebe-deployment/configuration/environment-variables/
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=${ELASTIC_ADDRESS}
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_AUTHENTICATION_USERNAME=${ELASTIC_USER}
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_AUTHENTICATION_PASSWORD=${ELASTIC_PASSWORD}
      # default is 1000, see here: https://github.com/camunda/zeebe/blob/main/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchExporterConfiguration.java#L259
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1000
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_DELAY=1
      # allow running with low disk space
      - ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK=0.998
      - ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK=0.999
      - "JAVA_TOOL_OPTIONS=-Xms512m -Xmx512m"
      - CAMUNDA_REST_QUERY_ENABLED=true
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - zeebe:/usr/local/zeebe/data
    depends_on:
      - elasticsearch

  operate:
    image: camunda/operate:${CAMUNDA_PLATFORM_VERSION}
    container_name: operate
    ports:
      - "8085:8080"
    environment: # https://docs.camunda.io/docs/self-managed/operate-deployment/configuration/
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=${ELASTIC_ADDRESS}
      - CAMUNDA_OPERATE_ELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - CAMUNDA_OPERATE_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=${ELASTIC_ADDRESS}
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.probes.enabled=true
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness" ]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    depends_on:
      - zeebe
      - elasticsearch

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
        - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
        bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST  -u "${ELASTIC_USER}:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";'

  elasticsearch: # https://hub.docker.com/_/elasticsearch
    depends_on:
      - setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - node.name=elasticsearch
      - path.logs=/var/log/
      - cluster.name=elasticsearch
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - elastic:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTIC_ADDRESS}
      - ELASTIC_APM_ACTIVE=true
      - ELASTIC_APM_SERVER_URL=http://apm:8200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    ports:
      - 5602:5601
    volumes:
      - kibana:/usr/share/kibana/data
    depends_on:
      - elasticsearch
  apm:
    image: docker.elastic.co/apm/apm-server:${ELASTIC_VERSION}
    container_name: apm
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
        - 8200:8200
    depends_on:
        - elasticsearch
        - kibana
    command: >
        apm-server -e
        -E output.elasticsearch.protocol=http
        -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
        -E output.elasticsearch.username=${ELASTIC_USER}
        -E output.elasticsearch.password=${ELASTIC_PASSWORD}
        -E output.elasticsearch.ssl.enabled=false

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
     - "9092:9092"
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
 
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8087:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
        - kafka
        - zookeeper

  credit.front.server:
    image: ${DOCKER_REGISTRY-}creditfrontserver
    build:
      context: .
      dockerfile: Modules/Front/Credit.Front/Server/Dockerfile
    
  # operations.webapi:
  #   image: ${DOCKER_REGISTRY-}operationswebapi
  #   build:
  #     context: .
  #     dockerfile: Modules/Operations/Operations.WebApi/Dockerfile
  #   environment:
  #      OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
  #      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}       
  #      OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
  #      OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}
  #      ConnectionStrings__Elasticsearch: ${ELASTIC_ADDRESS}

  # operations.backoffice.server:
  #   image: ${DOCKER_REGISTRY-}operationsbackofficeserver
  #   build:
  #     context: .
  #     dockerfile: Modules/BackOffice/Operations.BackOffice/Server/Dockerfile

  processes.worker:
    image: ${DOCKER_REGISTRY-}processesworker
    build:
      context: .
      dockerfile: Modules/Processes/Processes.Worker/Dockerfile
    depends_on:
      - zeebe
    environment:
       OTEL_EXPORTER_OTLP_ENABLED: ${OTLP_ENABLED}
       OTEL_EXPORTER_OTLP_ENDPOINT: ${OTLP_ENDPOINT}       
       OTEL_EXPORTER_AZUREMONITOR_ENABLED: ${AZUREMONITOR_ENABLED}
       OTEL_EXPORTER_AZUREMONITOR_ENDPOINT: ${AZUREMONITOR_ENDPOINT}

       # OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://seq:5341/ingest/otlp/v1/logs
       # OTEL_EXPORTER_OTLP_LOGS_HEADERS: X-Seq-ApiKey=tAndZ4eevhnvmhQqKpVQ
       # OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: http/protobuf

       # OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://seq:5341/ingest/otlp/v1/traces
       # OTEL_EXPORTER_OTLP_TRACES_HEADERS: X-Seq-ApiKey=tAndZ4eevhnvmhQqKpVQ
       # OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: http/protobuf
       
       # OTEL_SERVICE_NAME: "Process.Worker"
       # OTEL_DOTNET_AUTO_TRACES_ADDITIONAL_SOURCES: "*"
       # OTEL_DOTNET_AUTO_METRICS_ADDITIONAL_SOURCES: "*"

       Camunda__UseRest: false
       Camunda__CamundaRest__Endpoint: ${CAMUNDA_ADDRESS_REST}
       Camunda__CamundaGrpc__Endpoint: ${CAMUNDA_ADDRESS_GRPC}

       Camunda__JobWorkers__Default__TimeoutInMs: 60000
       Camunda__JobWorkers__Default__PoolingMaxJobsToActivate: 5
       Camunda__JobWorkers__Default__PoolingRequestTimeoutInMs: 10000
       Camunda__JobWorkers__Default__PoolingDelayInMs: 200
       Camunda__JobWorkers__Default__UseStream: "false"
       Camunda__JobWorkers__Default__StreamTimeoutInSec: 900

       ConnectionStrings__AzServiceBus: ${AZ_SERVICE_BUS_CONNECTION_STRING}
       
       ServiceBusProvider: "kafka"
       
       EventBus__bootstrapservers: kafka:9092
       EventBus__groupid: credit-processes
       EventBus__enableautocommit: "false"
       EventBus__statisticsintervalms: 5000
       EventBus__autooffsetreset: earliest
       EventBus__enablepartitioneof: "true"
    # env_file:
    #   - otel-dotnet.env



  # creditprocessfunctions:
  #   image: ${DOCKER_REGISTRY-}creditprocessfunctions
  #   build:
  #     context: .
  #     dockerfile: Modules/Functions/CreditProcessFunctions/Dockerfile

  mongo:
    image: mongo
    restart: always
    ports:
        - 27017:27017
    environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example

  # seq:
  #   image: datalust/seq
  #   container_name: seq
  #   environment:
  #       - ACCEPT_EULA=Y
  #   volumes:
  #       - seq_data:/data
  #   ports:
  #       - 5341:80

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #       - 8081:8081
  #   environment:
  #       ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #       ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #       ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  #       ME_CONFIG_BASICAUTH: false

volumes:
  zeebe:
  elastic:
  kibana:
  seq_data:
  certs:
    driver: local
