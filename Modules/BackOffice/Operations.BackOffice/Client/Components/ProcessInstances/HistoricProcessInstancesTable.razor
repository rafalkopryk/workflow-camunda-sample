@using Operations.BackOffice.Client.Data.ProcessDefinitions;
@using Operations.BackOffice.Client.Data.ProcessInstances;
@using Operations.BackOffice.Client.Data.ProcessInstances.Dto;

@inject NavigationManager NavigationManager

<MudTable @ref="_processInstanceTable"
    T="ProcessInstanceDto"
          ServerData="@(new Func<TableState, Task<TableData<ProcessInstanceDto>>>(GetProcessInstancesFromServer))"
    Hover="true"
    RowsPerPage="PageSize"
    Elevation="0">
    <HeaderContent>
        <MudTh>State</MudTh>
        <MudTh>Instance ID</MudTh>
        <MudTh>BPMN Process Id</MudTh>
        <MudTh>Start Time</MudTh>
        <MudTh>End Time</MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="State">
            @if (context.State == ProcessInstanceState.ACTIVE)
            {
                <MudIcon Icon="@Icons.Material.Outlined.PlayCircleOutline" Color="Color.Tertiary" Title="Active" />
            }
            else if (context.State == ProcessInstanceState.CANCELED)
            {
                <MudIcon Icon="@Icons.Material.Outlined.PauseCircleOutline" Color="Color.Default" Title="Canceled" />
            }
            else if (context.State == ProcessInstanceState.COMPLETED)
            {
                <MudIcon Icon="@Icons.Material.Outlined.CheckCircleOutline" Color="Color.Success" Title="Completed" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.HelpOutline" Color="Color.Error" Title=@($"UNKNOWN:{context.State.ToString()}")/>
            }
        </MudTd>
        <MudTd DataLabel="Instance ID">@context.Key</MudTd>
        <MudTd DataLabel="BPMN Process Id">@context.BpmnProcessId</MudTd>
        <MudTd DataLabel="Start Time">@context.StartDate</MudTd>
        <MudTd DataLabel="End Time">@context.EndDate</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Outlined.Info" OnClick="@(() => OnDetailsClick(context.Key.Value))" Title="Process Instance Details"/>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public IProcessInstanceService ProcessInstanceService { get; init; }

    [Parameter]
    public long? ProcessDefinitionKey { get; set; }

    [Parameter]
    public string? BpmnProcessId { get; set; }

    [Parameter]
    public ProcessInstanceState? ProcessState { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    private MudTable<ProcessInstanceDto> _processInstanceTable;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            return;
        }

        await _processInstanceTable.ReloadServerData();
    }


    private async Task<TableData<ProcessInstanceDto>> GetProcessInstancesFromServer(TableState state)
    {
        var instances = (await ProcessInstanceService.SearchProcessInstance(new SearchProcessInstanceQuery(
            new ProcessInstanceDto
            {
                ProcessDefinitionKey = ProcessDefinitionKey,
                BpmnProcessId = BpmnProcessId,
                State = ProcessState
            },
            PageSize
        ))).Items;
        var totalInstances = instances.Length;
        
        return new TableData<ProcessInstanceDto>()
        {
            Items = instances,
            TotalItems = totalInstances
        };
    }

    void OnDetailsClick(long instanceId)
    {
        NavigationManager.NavigateTo($"process-instances/{instanceId}");
    }
}