@using MudBlazor;

@if (CreditApplication is null)
{
    return;
}

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6">Application status</MudText>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudField Label="Status" Variant="Variant.Outlined">@(
                CreditApplication.State.Level switch
                {
                    Level.ApplicationRegistered => "Application registered",
                    Level.DecisionGenerated => "Decision generated",
                    Level.ContractSigned => "Contract signed",
                    Level.ApplicationClosed => "Application closed",
                })
        </MudField>
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        <MudField Label="Decision"
        Variant="Variant.Outlined"
        Adornment="Adornment.End"
        AdornmentIcon="@DecisionIcon"
        AdornmentColor="@DecisionIconColor">
            @(CreditApplication.State.Decision switch
            {
                Decision.NotExists => "Decision generating, wait...",
                _ => CreditApplication.State.Decision,
            })
        </MudField>
    </MudItem>

    @if(CreditApplication.State.Level == Level.ContractSigned)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudField Label="ContractSigningDate" Variant="Variant.Outlined">@CreditApplication.State?.ContractSigningDate</MudField>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public IWithCreditApplicationState CreditApplication { get; init; }

    public string DecisionIcon => CreditApplication.State.Decision switch
    {
        Decision.Positive => Icons.Material.Filled.CheckCircle,
        Decision.Negative => Icons.Material.Filled.Error,
        _ => Icons.Material.Filled.Info,
    };

    public Color DecisionIconColor => CreditApplication.State.Decision switch
    {
        Decision.Positive => Color.Success,
        Decision.Negative => Color.Error,
        _ => Color.Info
    };
}
