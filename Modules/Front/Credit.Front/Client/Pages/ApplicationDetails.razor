@page "/applications/{ApplicationId}"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IOptions<ExternalServicesOptions> ExternalServicesOptions;

@implements IDisposable

@using Credit.Front.Client.Components
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Credit.Front.Client.Components.CreditParams
@using Credit.Front.Client.Components.CreditStatus
@using Microsoft.Extensions.Options;
@using MudBlazor;

@if (CreditApplication == null)
{
    <p>Loading...</p>

    return;
}

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudCard>
        <MudCardContent>
            <CreditParamsContent CreditApplication="@CreditApplication" ApplicationId="@ApplicationId" />
            <CreditStatusContent CreditApplication="@CreditApplication" />
        </MudCardContent>
        <MudCardActions>
            <MudGrid Justify="Justify.FlexEnd">
                <MudItem>
                    <SignContractButton CreditApplication="@CreditApplication" OnSignContract="@SignContract" />
                </MudItem>
                <MudItem>
                    <CancelApplicationButton CreditApplication="@CreditApplication" OnCancelApplication="@CancelApplication" />
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public string? ApplicationId { get; set; }

    private CreditApplicationDto? CreditApplication { get; set; }

    private readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(2));

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CreditApplication = await GetApplication();

        RunLongPooling().Forget();
    }

    private async Task RunLongPooling()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            if (CreditApplication.State.Level is not Level.ApplicationRegistered and not Level.DecisionGenerated)
            {
                break;
            }

            CreditApplication = await GetApplication();

            if (CreditApplication.State.Level is Level.DecisionGenerated)
            {
                _periodicTimer.Period = TimeSpan.FromSeconds(5);
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<CreditApplicationDto> GetApplication()
    {
        var result = await Http.GetFromJsonAsync<GetCreditApplicationDto>($"{ExternalServicesOptions.Value.Applications.Url}/applications/{ApplicationId}", options: CustomJsonSerializerOptions.Web);
        return result.CreditApplication;
    }

    async Task SignContract()
    {
        var httpResult = await Http.PostAsync($"{ExternalServicesOptions.Value.Applications.Url}/applications/{ApplicationId}/signature", new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json"));
        CreditApplication = await GetApplication();

    }

    async Task CancelApplication()
    {
        var httpResult = await Http.PostAsync($"{ExternalServicesOptions.Value.Applications.Url}/applications/{ApplicationId}/cancellation", new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json"));
        CreditApplication = await GetApplication();
    }

    public void Dispose()
    {
        _periodicTimer?.Dispose();
    }

    record GetCreditApplicationDto(CreditApplicationDto CreditApplication);

    record CreditApplicationDto : IWithCreditParams, IWithCreditApplicationState
    {
        public decimal Amount { get; set; }
        public decimal CreditPeriodInMonths { get; set; }
        public ApplicationStateDto State { get; init; }
    }
}