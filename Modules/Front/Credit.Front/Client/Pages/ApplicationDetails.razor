@page "/applications/{ApplicationId}"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IOptions<ExternalServicesOptions> ExternalServicesOptions;

@implements IDisposable

@using Credit.Front.Client.Components
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Microsoft.Extensions.Options;
@using MudBlazor;

@if (CreditApplication == null)
{
    <p>Loading...</p>

    return;
}

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudCard>
        <MudCardContent>
            <CreditParamsContent CreditApplication="@CreditApplication" ApplicationId="@ApplicationId" />
            <CreditStatusContent CreditApplication="@CreditApplication" />
        </MudCardContent>
        <MudCardActions>
            <SignContractButton CreditApplication="@CreditApplication" OnSignContract="@SignContract" />
            <CancelApplicationButton CreditApplication="@CreditApplication" OnCancelApplication="@CancelApplication"  />
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {

    public static readonly JsonSerializerOptions options = new JsonSerializerOptions(JsonSerializerDefaults.Web)
    {
        Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase) },
    };

    public const Level APPLICATION_REGISTERED = Level.ApplicationRegistered;
    public const Level DECISION_GENERATED = Level.DecisionGenerated;
    public const Level CONTRACT_SIGNED = Level.ContractSigned;
    public const Level APPLICATION_CLOSED = Level.ApplicationClosed;

    [Parameter]
    public string? ApplicationId { get; set; }

    private CreditApplicationDto? CreditApplication { get; set; }

    private readonly PeriodicTimer _periodicTimer = new(TimeSpan.FromSeconds(2));

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        RunLongPooling().Forget();
    }

    async Task SignContract()
    {
        var httpResult = await Http.PostAsync($"{ExternalServicesOptions.Value.Applications.Url}/applications/{ApplicationId}/signature", new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json"));
        CreditApplication = await GetApplication();

    }

    async Task CancelApplication()
    {
        var httpResult = await Http.PostAsync($"{ExternalServicesOptions.Value.Applications.Url}/applications/{ApplicationId}/cancellation", new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json"));
        CreditApplication = await GetApplication();
    }

    async Task RunLongPooling()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            CreditApplication = await GetApplication();

            if (CreditApplication.State.Level is DECISION_GENERATED)
            {
                _periodicTimer.Period = TimeSpan.FromSeconds(5);
            }

            await InvokeAsync(StateHasChanged);

            if (CreditApplication.State.Level is not APPLICATION_REGISTERED and not DECISION_GENERATED)
            {
                break;
            }
        }
    }

    public void Dispose()
    {
        _periodicTimer?.Dispose();
    }

    private async Task<CreditApplicationDto> GetApplication()
    {
        var result = await Http.GetFromJsonAsync<GetCreditApplicationDto>($"{ExternalServicesOptions.Value.Applications.Url}/applications/{ApplicationId}", options: options);
        return result.CreditApplication;
    }

    record GetCreditApplicationDto(CreditApplicationDto CreditApplication);

    record CreditApplicationDto : IWithCreditParams, IWithCreditApplicationState
    {
        public decimal Amount { get; init; }
        public decimal CreditPeriodInMonths { get; init; }
        public ApplicationState State { get; init ; }
    }
}