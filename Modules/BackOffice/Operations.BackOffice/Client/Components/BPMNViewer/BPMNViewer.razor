@using System.Runtime.InteropServices.JavaScript;
@using System.Net;
@using System.Text.Json;
@using System.Text.Json.Serialization;

@using Microsoft.Extensions.Options;

@inject IJSRuntime JS
@implements IAsyncDisposable

@if (Xml != null)
{
    <div @ref="_bpmnJsElement"></div>
}

@code {
    private ElementReference _bpmnJsElement;
    private IJSObjectReference _bpmnJsModule;
    private IJSObjectReference _bpmnJsInstance;

    [Parameter]
    public string? Xml { get; set; }

    [Parameter]
    public string[] SequenceFlows { get; set; } = Array.Empty<string>();

    [Parameter]
    public List<OverlayConfig> OverlayConfigs { get; set; } = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _bpmnJsModule = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./Components/BPMNViewer/BPMNViewer.razor.js");

            _bpmnJsInstance = await _bpmnJsModule.InvokeAsync<IJSObjectReference>(
                "createBpmnJSInstance",
                _bpmnJsElement);

            await InvokeAsync(StateHasChanged);
        }

        if (!firstRender && _bpmnJsInstance != null)
        {
            await OpenDiagram();



            //await SetupOverlays();
        }
    }

    private async Task OpenDiagram()
    {
        await _bpmnJsModule.InvokeVoidAsync("openDiagram", _bpmnJsInstance, Xml);

        await _bpmnJsModule.InvokeVoidAsync("addMarker", _bpmnJsInstance, SequenceFlows);
        // await _bpmnJsModule.InvokeVoidAsync("stepZoom", _bpmnJsInstance, 100);

        //await _bpmnJsModule.InvokeVoidAsync("recenterDiagram", _bpmnJsInstance);
    }


    async Task SetupOverlays()
    {
        foreach (var overlayConfig in OverlayConfigs)
        {
            // Only setup overlays that do not have a overlayID (because they have not been created yet)
            if (overlayConfig.State == "INIT" && overlayConfig.OverlayId == null)
            {
                overlayConfig.OverlayId = await _bpmnJsModule.InvokeAsync<string>("addOverlay", overlayConfig, _bpmnJsInstance);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        // await _bpmnJsInstance.InvokeVoidAsync("destroy"); // @TODO REVIEW
        await _bpmnJsInstance.DisposeAsync();
        await _bpmnJsModule.DisposeAsync();
    }
}
